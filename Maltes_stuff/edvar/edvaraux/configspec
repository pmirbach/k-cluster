[aim]
Nbath = integer(min=0,default=None)		# number of bath sites per orbital
NimpOrbs = integer(min=1,default=1)		# number of orbitals

epsImp = float_list(default=None)		# list of onsite imp. energies

Bz = float(default=0.0)
UImp = float(default=None)			# coulomb (like in Slater)
JImp = float(default=None)			# coulomb (like in Slater

epsBathRange = boolean(default=False)                   # set Bath as range 

epsBathRangeCenter = float(default = 0.0)               # center of bath energies
epsBathRangeBandWidth = float(default = 10.0)           # bandwidth of range bath
vBath = option('flatDOS','simpleV',default='simpleV')   # 'flatDOS' sets the V such that
                                                        # vBathRange is the V from PRB 89 245104
                                                        # simpleV simply sets all V to vBathRange
vBathRange = float(default = 1.0)

epsBath1 = float_list(default=None)		# list of bath onsite energies
epsBath2 = float_list(default=None)		# one list for each orbital
epsBath3 = float_list(default=None)		# use as much as you need
epsBath4 = float_list(default=None)	
epsBath5 = float_list(default=None)

vBath1 = float_list(default=None)		# list of couplings from above energies
vBath2 = float_list(default=None)		# to respective orbital:
vBath3 = float_list(default=None)		# vBath2 are couplings from epsBath2 to 
vBath4 = float_list(default=None)		# orbital 2
vBath5 = float_list(default=None)

terms = option('full','dens',default='full')	# terms of the Coulomb tensor
numDeg = integer(default=0)			# number of degeneracies
deg1 = integer_list(default=None)		# list for each degeneracy class
deg2 = integer_list(default=None)		# e.g. t2g/eg: numDeg=2
deg3 = integer_list(default=None)		# numDeg = 2, deg1=0,1,3, deg2 = 2,4
deg4 = integer_list(default=None)		# count from zero!
deg5 = integer_list(default=None)


beta = float(default=None)			# for thermodynamic calculations
onlyGroundState = boolean(default=None)		# for T=0 calculations
mu = float(default=0.0)				# chemical potential
readRealMat = boolean(default=False)		# read and fit hybridization function
	      					# from file defined in [realistichyb]
						# to get epsBath and vBath

overRideV_Deg_Check = boolean(default=False)	# override the check if parameters obey degeneracies
degeneracyTol = float(default=1e-15)		# tolerance for check of degeneracies

lsCoupling = boolean(default=False)
gFact = float(default=0.06)

[algo]
noHF = boolean(default=False)			# use hartree-fock solution or single particle
       						# hamiltonian for projection onto C'
optOnlyBath = boolean(default=False)		# optimize only bath states ('bath' vs 'all')
optU       = boolean(default=False)      # optimize Slater-parameters
optV       = boolean(default=True)      # optimize hybridization
optEpsBath = boolean(default=True)      # optimize bath energy
optEpsD    = boolean(default=True)      # optimize impurity energy
deltaOuter = float(default=1e-2)		# tolerance for minimizing parameters of eff. Ham.
deltaInner = float(default=1e-10)		# tolerance for minimizing basis transformation
maxIterOuter = integer(default=None)		# maximum number of optimization steps to find
	       					# parameters of eff. Ham.
						# set to zero to only find optimal basis
maxIterInner = integer(default=100)		# maximum number of optimization steps to find
	       					# optimal transformation

scratchDir = string(default=None)		# some directory to save some temps, should not 
	     					# be a network storage
						
fitLegendre = boolean(default=True)		# fit basis transformation by some functions
funcSystem = option('cheby','leg',default='cheby')    # use chebyshev or legendre polynomials
chebyPole = boolean(default=True)		# use seperate fit for above/below fermi energy
legendreOrder = integer(min=1,default=5)	# how many polynomials to use

show = boolean(default=True)			# set verbosity

save = boolean(default=True)			# to save or not to save
resultFileName=string(default='Hello_World')	# name of file to which results and cfg are saved
appendDateString = boolean(default=True)	# append date string to save file name

firstGuess = float_list(default=None)		# give first guess for bath parameters of eff. Ham.
	     					# [V1,V2,...,e1,e2,...]

firstGuessCafKrauth = boolean(default=True)	# use fit on imag. axis to obtain first guess
		      				# firstGuess is then overwritten
numIWFit = integer(default=2001)		# number of matsubara frequencies for fit
betaFit = float(default=40.0)			$ beta for fit
weightFunc = integer(default=0)			# negativ weight function exponent in cost function
numItersRandFit = integer(default=1000)		# number of runs with random starting points
maxDeltaFitBreak = float(default=1e-12)		# goodness of random fit
startV = float_list(default=list(0.0,10.0))	# intervall in which V starting points are distributed
startE = float_list(default=list(-10.0,10.0))	# intervall in which e starting points are distributed

[realistichyb]
filename = string(default='Delta')		# file name of hybridization in Delta_all format
calculateCrystalField = boolean(default=False)	# add crystal field, calculated from real part of
		      				# hybridization to epsImp
epsMin = float(default=-9.9)			# lowest epsBath
epsMax = float(default=9.9)			# highest epsBath
nDisk = integer(min=1,default=100)		# number of energies between epsMin and epsMax
idelta = float(default=0.1)
checkByPlot = boolean(default=True)

[ed]
restric = boolean(default=True)			# restrict blocks for calculation of expec. values
PMBlock = integer(default=100)			# plus minus particle number of blocks which are
	  					# considered for expec. values
betaCutOffExpecValue = float(default=1e-25)	# cutoff of calculation of expec. values if part. func.
		       				# in block is smaller than this
Nmin = integer(default=0)			# minimal part. number considerated in diag and expec
Nmax = integer(default=1000)			# maximal part. number considerated in diag and expec
Nthreshhold = integer(default=500)		# blocks with dimension smaller are treated by full
	      					# diagonalization, with bigger by Lancosz
Nvalues = integer(default=7)			# number of eigenvalues by Lancosz
tol = float(default=0.0)			# tol for finding eigenvalues
arnoldiIters = integer(default=4001)		# number of arnoldi iterations
valUpdateIter = integer(default=200)		# number of iterations in which number of eigenvalues
valUpdateValues = integer(default=5)		# is raised by valUpdateIters
calcSpectra = boolean(default=False)
minW = float(default=-20)
maxW = float(default=20)
numW = float(default=2000)
idelta = float(default=0.1)
excited = integer(default=0)

[hf]
maxIter = integer(default=500)			# maximum numbers of HF self-consistence steps
minDiff = float(default=1e-6)			# tolerance for occupation matrix
mixing = float(min=0.0,max=1.0,default=0.9)	# mixing
updateUncorrelated = boolean(default=False) # update Hatreee-Fock self energy self consistently



